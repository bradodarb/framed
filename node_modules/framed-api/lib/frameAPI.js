var baseAPI = require('./base/baseAPI');
var dal = require('framed-dal');
var Validator = require('jsonschema').Validator;


function FrameAPI() {

}

module.exports = function (app, options) {

    options = options || {};
    options.getSeed = function () {
        return {
            name: 'New Frame',
            version: '1.0.0',
            classes: [],
            attributes: [],
            width: {value: 0, unit: 'px', auto: true},
            height: {value: 0, unit: 'px', auto: true},
            topMargin: {value: 0, unit: 'px', auto: true},
            rightMargin: {value: 0, unit: 'px', auto: true},
            bottomMargin: {value: 0, unit: 'px', auto: true},
            leftMargin: {value: 0, unit: 'px', auto: true}
        };
    };


    options.validators = [];
    options.validators.push(function (item) {
        var v = new Validator();
        var measurementSchema = {

            "id": "/Measurement",
            "type": "object",
            "properties": {

                "value": {"type": "number"},
                "unit": {"type": "string"},
                "auto": {"type": "boolean"}
            }
        };

        var attribSchema = {

            "id": "/Attribute",
            "type": "object",
            "properties": {
                "name": {"type": "string", "required": true},
                "value": {"type": "string"}
            }

        }
        var frameSchema = {
            "id": "/Frame",
            "type": "object",
            "properties": {
                "frames": {
                    "type": "array",
                    "items": {"$ref": "/Frame"}
                },
                "classes": {
                    "type": "array",
                    "items": {"type": "string"}
                },
                "attributes": {
                    "type": "array",
                    "items": {"$ref": "/Attribute"}
                },
                "name": {"type": "string"},
                "version": {"type": "string", "required": true},
                "width": {"$ref": "/Measurement"},
                "height": {"$ref": "/Measurement"},
                "topMargin": {"$ref": "/Measurement"},
                "rightMargin": {"$ref": "/Measurement"},
                "bottomMargin": {"$ref": "/Measurement"},
                "leftMargin": {"$ref": "/Measurement"}
            }
        };

        v.addSchema(measurementSchema, '/Measurement');
        v.addSchema(attribSchema, '/Attribute');
        v.addSchema(frameSchema, '/Frame');

        var result = v.validate(item, frameSchema);
        return result.errors.length < 1;
    });

    var dao = new dal.frameDAO(options);
    options.dao = new dao();

    baseAPI(app, options, FrameAPI.prototype);


    return FrameAPI;
};