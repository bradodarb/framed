var mongodb = require('mongodb');
var Db = require('mongodb').Db;


module.exports.mongoDAO = function (options, base) {

    if (!options || !options.collection) {
        throw {err: 'Invalid options, check arguments'};
    }
    base = base || {};


    (function () {

        var _self = this;
        var _url = options.dbUrl || 'mongodb://127.0.0.1:27017/framed';
        var _collection = options.collection || null;
        var _safe = options.safe || true;
        var _strict = options.strict || false;
        var _validators = options.validators || [];
        var _getSeed = options.getSeed;



        this.insert = function (data, callback) {

            if (!validate(data)) {
                if(_getSeed){
                    data = _getSeed();
                }else{
                    callback({err: "Invalid ctor provided!"});
                    return;
                }
            }

            getCollection(function (err, db, collection) {
                if (err) {
                    callback(err);
                } else if (db && collection) {
                    if (callback) {
                        collection.insert(data, {safe: _safe}, function (err, result) {
                            if (result.length === 1) {
                                callback(err, result[0]);
                                db.close();
                            }
                        });
                    } else {
                        collection.insert(data);
                        db.close();
                    }
                }
            });
        };

        this.update = function (query, data, callback) {
            if (validate(data)) {
                getCollection(function (err, db, collection) {
                    if (err) {
                        callback(err);
                    } else if (db && collection) {
                        delete data._id;
                        collection.update(query, data, function (err, result) {
                            callback(err, result);
                            db.close();
                        });
                    }
                });
            }else{
                callback({err: "Invalid object provided for update!"});
            }
        };

        this.updateById = function (id, data, callback) {

            if (validate(data)) {
                getCollection(function (err, db, collection) {
                    var query = {_id: mongodb.ObjectID(id)};
                    if (err) {
                        callback(err);
                    } else if (db && collection) {
                        delete data._id;
                        collection.update(query, data, function (err, result) {
                            callback(err, result);
                            db.close();
                        });
                    }
                });
            }else{
                callback({err: "Invalid object provided for update!"});
            }
        };

        this.updateMany = function (query, data, callback) {

            if (validate(data)) {
                getCollection(function (err, db, collection) {
                    if (err) {
                        callback(err);
                    } else if (db && collection) {
                        delete data._id;
                        collection.update(query, data, {multi: true}, function (err, result) {
                            callback(err, result);
                            db.close();
                        });
                    }
                });
            }else{
                callback({err: "Invalid object(s) provided for update!"});
            }
        };

        this.find = function (query, fields, options, callback) {
            getCollection(function (err, db, collection) {
                if (err) {
                    callback(err);
                } else if (db && collection) {
                    collection.find(query, fields, options, function (err, result) {
                        if (err) {
                            callback(err, null);
                            db.close();
                        } else {
                            result.toArray(function (err, result) {
                                callback(err, result);
                            });
                        }
                    });
                }
            });
        };

        this.page = function (query, fields, page, size, callback) {
            size = size || 10;
            page = page || 1;
            var offset = (page - 1) * size;
            var count = 0;

            getCollection(function (err, db, collection) {
                if (err) {
                    callback(err);
                } else if (db && collection) {
                    collection.find(query, fields, {skip: offset, limit: size}, function (err, result) {
                        if (err) {
                            callback(err, null);
                            db.close();
                        } else {
                            result.toArray(function (err, result) {
                                callback(err, result);
                            });
                        }
                    });
                }
            });
        };

        this.findOne = function (query, fields, options, callback) {
            getCollection(function (err, db, collection) {
                if (err) {
                    callback(err);
                } else if (db && collection) {
                    collection.findOne(query, fields, options, function (err, result) {
                        callback(err, result);
                        db.close();
                    });
                }
            });
        };
        this.findById = function (id, fields, options, callback) {
            getCollection(function (err, db, collection) {
                var query = {_id: mongodb.ObjectID(id)};
                if (err) {
                    callback(err);
                } else if (db && collection) {
                    collection.findOne(query, fields, options, function (err, result) {
                        callback(err, result);
                        db.close();
                    });
                }
            });
        };

        this.findAll = function (fields, options, callback) {
            _self.find({}, fields, options, callback);
        };

        this.delete = function (query, callback) {
            getCollection(function (err, db, collection) {
                if (err) {
                    callback(err);
                } else if (db && collection) {
                    if (callback) {
                        collection.remove(query, {safe: _safe}, function (err, result) {
                            callback(err, result);
                            db.close();
                        });
                    } else {
                        collection.remove(query);
                        db.close();
                    }
                }
            });
        };

        this.deleteById = function (id, callback) {
            getCollection(function (err, db, collection) {
                var query = {_id: mongodb.ObjectID(id)};
                if (err) {
                    callback(err);
                } else if (db && collection) {
                    if (callback) {
                        collection.remove(query, {safe: _safe}, function (err, result) {
                            callback(err, result);
                            db.close();
                        });
                    } else {
                        collection.remove(query);
                        db.close();
                    }
                }
            });
        };


        function validate(item) {
            var result = true;
            var len = _validators.length;
            for (var i = 0; i < len; i++) {
                if (!_validators[i](item)) {
                    result = false;
                    break
                }
            }

            return result;
        }

        function validateMany(items) {
            var result = true;
            var len = items.length;
            for (var i = 0; i < len; i++) {
                if (!validate(items[i])) {
                    result = false;
                    break
                }
            }

            return result;
        }

        function getCollection(callback) {
            if(!_collection){

                throw {err: 'Invalid collection definition!'}
            }
            Db.connect(_url, function (err, db) {
                if (err) {
                    callback(err);
                } else {
                    db.collection(_collection, {strict: _strict}, function (err, collection) {
                        callback(err, db, collection);
                    });
                }
            });
        }

    }).call(base, options);

    return base;
}
